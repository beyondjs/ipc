/************
Processor: ts
************/

// child/events.ts
declare namespace ns_0 {
  import EventListenerType = ns_6.EventListenerType;
  export class _default {
    #private;
    constructor();
    emit(event: string, message: any): void;
    on(source: string, event: string, listener: EventListenerType): void;
    off(source: string, event: string, listener: EventListenerType): void;
    destroy(): void;
  }
}


// child/index.ts
declare namespace ns_1 {
  import IPCServer = ns_2._default;
  export class _default extends IPCServer {
    #private;
    get instance(): string;
    get events(): any;
    constructor();
    notify(...params: any[]): void;
    /**
     * Execute an IPC action
     *
     * @param target The name of the target process
     * @param action The name of the action being requested
     * @param params The parameters of the action
     * @returns {*}
     */
    exec(target: string | undefined, action: string, ...params: any[]): Promise<any>;
    destroy(): void;
  }
}


// child/server.ts
declare namespace ns_2 {
  import ActionHandlerType = ns_6.ActionHandlerType;
  export class _default {
    #private;
    handle: (action: string, listener: ActionHandlerType) => Map<string, ActionHandlerType>;
    removeHandler: (action: string) => boolean;
    constructor();
    destroy(): void;
  }
}


// dispatcher/index.ts
declare namespace ns_3 {
  /// <reference types="node" />
  export class _default {
    #private;
    constructor(container: {
      instance: string;
    }, fork: NodeJS.Process);
    /**
     * Execute an IPC action
     */
    exec(target: string | undefined, action: string, ...params: any[]): Promise<any>;
    destroy(): void;
  }
}


// error.ts
declare namespace ns_4 {}


// index.ts
declare namespace ns_5 {
  export {};
}


// interfaces/index.ts
declare namespace ns_6 {
  export type ActionHandlerType = (...params: any[]) => any;
  export type EventListenerType = (message: any) => void;
  export interface IRequest {
    type: 'ipc.request';
    ipc: {
      instance: string;
    };
    id: number;
    target: string;
    action: string;
    params: any[];
  }
  export interface IResponse {
    type: 'ipc.response';
    ipc: {
      instance: string;
    };
    request: {
      id: number;
    };
    response?: any;
    error?: Error | string;
  }
  export interface IAddEventListener {
    type: 'ipc.add.event.listener';
    source: string;
    event: string;
  }
  export interface IRemoveEventListener {
    type: 'ipc.remove.event.listener';
    source: string;
    event: string;
  }
  export interface IEventDispatch {
    type: 'ipc.event.dispatch';
    source: string;
    event: string;
    message: any;
  }
  export interface IEventEmit {
    type: 'ipc.event.emit';
    event: string;
    message: any;
  }
}


// main/events/index.ts
declare namespace ns_7 {
  /// <reference types="node" />
  /// <reference types="node" />
  /// <reference types="node" />
  /// <reference types="node" />
  /// <reference types="node" />
  /// <reference types="node" />
  /// <reference types="node" />
  import EventListenerType = ns_6.EventListenerType;
  export type ListenersType = Map<string, Set<EventListenerType>>;
  export class _default {
    #private;
    constructor();
    on(source: string, event: string, listener: EventListenerType): void;
    off(source: string, event: string, listener: EventListenerType): void;
    emit(event: string, message: any): void;
    /**
     * Register a fork process to hear for actions requests
     */
    registerFork: (name: string, fork: NodeJS.Process) => void;
  }
}


// main/events/sources/index.ts
declare namespace ns_8 {
  /// <reference types="node" />
  import ListenersType = ns_7.ListenersType;
  export class _default {
    #private;
    constructor(listeners: ListenersType);
    emit(sourceName: string, event: string, message: any): void;
    register(name: string, fork: NodeJS.Process): void;
    destroy(): void;
  }
}


// main/events/sources/source.ts
declare namespace ns_9 {
  /// <reference types="node" />
  import Sources = ns_8._default;
  export class _default {
    #private;
    constructor(sources: Sources, name: string, fork: NodeJS.Process);
    /**
     * Dispatch the event if the forked process is registered to it
     * The execution of this method is made by the index.js file (the sources collection)
     *
     * @param sourceName The name of the process that is sending the event
     * @param event The event name
     * @param message The message to be sent
     */
    emit(sourceName: string, event: string, message: any): void;
    destroy(): void;
  }
}


// main/index.ts
declare namespace ns_10 {
  /// <reference types="node" />
  import Events = ns_7._default;
  type ListenerType = (...[]: Iterable<any>) => any;
  export class _default {
    #private;
    get instance(): string;
    handle: (action: string, listener: ListenerType) => Map<string, ActionHandlerType>;
    removeHandler: (action: string) => boolean;
    get events(): Events;
    notify(event: string, message: any): void;
    register(name: string, fork: NodeJS.Process): void;
    unregister(name: string): void;
    /**
     * Execute an IPC action
     */
    exec(target: string | undefined, action: string, ...params: any[]): Promise<any>;
    destroy(): void;
  }
  export {};
}


// main/server/index.ts
declare namespace ns_11 {
  /// <reference types="node" />
  import Dispatcher = ns_3._default;
  import ActionHandlerType = ns_6.ActionHandlerType;
  export class _default {
    #private;
    constructor(dispatchers: Map<string, Dispatcher>);
    handle: (action: string, handler: ActionHandlerType) => Map<string, ActionHandlerType>;
    off: (action: string) => boolean;
    has: (action: string) => boolean;
    /**
     * Register a forked process to hear for actions requests
     *
     * @param name {string} The name assigned to the forked process
     * @param fork {object} The forked process
     */
    registerFork(name: string, fork: NodeJS.Process): void;
    exec(action: string, ...params: any[]): Promise<any>;
    destroy(): void;
  }
}


// main/server/listeners/index.ts
declare namespace ns_12 {
  /// <reference types="node" />
  import Dispatcher = ns_3._default;
  import Server = ns_11._default;
  export class _default {
    #private;
    constructor(server: Server, dispatchers: Map<string, Dispatcher>);
    register(name: string, fork: NodeJS.Process): void;
    destroy(): void;
  }
}


// main/server/listeners/listener.ts
declare namespace ns_13 {
  /// <reference types="node" />
  import Dispatcher = ns_3._default;
  import Server = ns_11._default;
  export class _default {
    #private;
    constructor(server: Server, fork: NodeJS.Process, dispatchers: Map<string, Dispatcher>);
    destroy(): void;
  }
}



export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };